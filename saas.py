#!/usr/bin/env python

ODOO_VERSION = 8
SUPERUSER_ID = 1

import argparse
import fcntl
import contextlib
import json
import os
import psycopg2
import requests
import resource
import signal
import xmlrpclib
import subprocess


parser = argparse.ArgumentParser(description='''Control script to manage saas system.
It\'s assumed, that you have ^%h$ as dbfilter in odoo configuration.
Also, you need configured webserver (e.g. nginx).
''',
                                 formatter_class=argparse.RawTextHelpFormatter,
                                 epilog='''
------------------------
Local usage:

   python saas.py
   sudo bash -c "python saas.py --local-hosts >> /etc/hosts"
''')

settings_group = parser.add_argument_group('Common settings')
settings_group.add_argument('--suffix', dest='suffix', default=ODOO_VERSION, help='suffix for names')
settings_group.add_argument('--odoo-script', dest='odoo_script', help='Path to openerp-server', default='./openerp-server')
settings_group.add_argument('--odoo-config', dest='odoo_config', help='Path to odoo configuration file')
settings_group.add_argument('--admin-password', dest='admin_password', help='Password for admin user. It\'s used for new databases.')
#settings_group.add_argument('--db_user', dest='db_user', help='database user name')
other_group.add_argument('--simulate', dest='simulate', action='store_true', help='Don\'t make actual changes. Just show what script is going to do.')


portal_group = parser.add_argument_group('Portal creation')
portal_group.add_argument('--portal-create', dest='portal_create', help='Create SaaS Portal database', action='store_true')
portal_group.add_argument('--portal-db-name', dest='portal_db_name', default='saas-portal-{suffix}.local')

server_group = parser.add_argument_group('Server creation')
server_group.add_argument('--server-create', dest='server_create', help='Create SaaS Server database', action='store_true')
server_group.add_argument('--server-db-name', dest='server_db_name', default='server-1.saas-portal-{suffix}.local')

plan_group = parser.add_argument_group('Plan creation')
plan_group.add_argument('--plan-create', dest='plan_create', help='Create Plan', action='store_true')
plan_group.add_argument('--plan-name', dest='plan_db_name', default='Plan')
plan_group.add_argument('--plan-template-db-name', dest='plan_template_db_name', default='template-1.saas-portal-{suffix}.local')
plan_group.add_argument('--plan-clients', dest='plan_clients', default='client-%i.saas-portal-{suffix}.local', help='Template for new client databases')

other_group = parser.add_argument_group('Other')
other_group.add_argument('--local-hosts', dest='local_hosts', action='store_true', help='Print hosts rules for local usage.')
other_group.add_argument('--run', dest='run', action='store_true', help='Run server')
other_group.add_argument('--cleanup', dest='cleanup', action='store_true', help='Drop all saas databases. Use along with --simulate to check which database would be deleted')

args = vars(parser.parse_args())

# format vars
suffix = args['suffix']
for a in args:
    if type(args[a]) == str:
        args[a] = args[a].format(suffix=suffix)


def main():
    if args.get('simulate'):
        print 'SIMULATION MODE'

    if args.get('cleanup'):
        cleanup()

    if args.get('local_hosts'):
        host_line = '127.0.0.1 %s'
        print ''
        print '# generated by odoo-saas-tools'
        for host in ['portal_db_name', 'server_db_name', 'plan_template_db_name']:
            print host_line % args.get(host)
        for i in range(1, 11):
            print host_line % (args.get('plan_clients').replace('%i', '%03i' % i))

    if args.get('portal_create'):
        createdb(args.get('portal_db_name'), ['saas_portal'])

    if args.get('run'):
        cmd = get_cmd()
        exec_cmd(cmd)

# ----------------------------------------------------------
# Tools
# ----------------------------------------------------------

def createdb(dbname, install_modules=['base'], without_demo=True):
    pg_dropdb(dbname)

    cmd = get_cmd()
    cmd += ['-d', dbname]
    cmd += ['-i', ','.join(install_modules)]
    if without_demo:
        cmd += ['--without-demo=all']

    if not args.get('admin_password'):
        cmd += ['--stop-after-init']
        exec_cmd(cmd)
        return
    else:
        pid = spawn_cmd(cmd)
        update_db(dbname, new_admin_password=args.get('admin_password'))
        kill(pid)


def dropdb(dbname):
    pg_dropdb(dbname)
    return  # TODO
    # cleanup filestore
    #datadir = appdirs.user_data_dir()
    #paths = [os.path.join(datadir, pn, 'filestore', dbname) for pn in 'OpenERP Odoo'.split()]
    #exec_cmd(['rm', '-rf'] + paths)

def cleanup():
    pass

# ----------------------------------------------------------
# RPC Tools
# ----------------------------------------------------------

def update_db(dbname, new_admin_password=None):

    # Credentials
    main_url = 'http://%s' % dbname
    admin_username = 'admin'
    admin_password = 'admin'

    # Authenticate
    common = xmlrpclib.ServerProxy('{}/xmlrpc/2/common'.format(main_url))
    admin_uid = common.authenticate(dbname, admin_username, admin_password, {})
    models = xmlrpclib.ServerProxy('{}/xmlrpc/2/object'.format(main_url))

    if new_admin_password:
        models.execute_kw(dbname, admin_uid, admin_password, 'res.users', 'write', [[SUPERUSER_ID], {
            'password': new_admin_password,
        }])


# some functions below were taken from runbot module: https://github.com/odoo/odoo-extra/tree/master/runbot
# ----------------------------------------------------------
# DB Tools
# ----------------------------------------------------------
def pg_createdb(dbname, without_demo=True):
    print 'Creating empty database %s' % dbname
    with local_pgadmin_cursor() as local_cr:
        local_cr.execute("""CREATE DATABASE "%s" TEMPLATE template0 LC_COLLATE 'C' ENCODING 'unicode'""" % dbname)


def pg_dropdb(dbname):
    print 'Dropping  database %s' % dbname
    with local_pgadmin_cursor() as local_cr:
        local_cr.execute('DROP DATABASE IF EXISTS "%s"' % dbname)


@contextlib.contextmanager
def local_pgadmin_cursor():
    cnx = None
    try:
        cnx = psycopg2.connect("dbname=postgres")
        cnx.autocommit = True  # required for admin commands
        yield cnx.cursor()
    finally:
        if cnx:
            cnx.close()


# ----------------------------------------------------------
# OS Tools
# ----------------------------------------------------------
def get_cmd():
    cmd = [
        args.get('odoo_script'),
    ]
    if args.get('odoo_config'):
        cmd += ['--config=%s' % args.get('odoo_config')]
    return cmd


def exec_cmd(cmd):
    os.system(' '.join(cmd))


def spawn_cmd(self, cmd, cpu_limit=None, shell=False):
    def preexec_fn():
        os.setsid()
        if cpu_limit:
            # set soft cpulimit
            soft, hard = resource.getrlimit(resource.RLIMIT_CPU)
            r = resource.getrusage(resource.RUSAGE_SELF)
            cpu_time = r.ru_utime + r.ru_stime
            resource.setrlimit(resource.RLIMIT_CPU, (cpu_time + cpu_limit, hard))
        # close parent files
        os.closerange(3, os.sysconf("SC_OPEN_MAX"))
        #lock(lock_path)
    #out=open(log_path,"w")
    #_logger.debug("spawn: %s stdout: %s", ' '.join(cmd), log_path)
    p = subprocess.Popen(cmd,
                         #stdout=out,
                         #stderr=out,
                         preexec_fn=preexec_fn,
                         shell=shell)
    return p.pid


def kill(pid):
    try:
        os.killpg(pid, signal.SIGKILL)
    except OSError:
        pass


if __name__ == "__main__":
    main()
